{"ast":null,"code":"import { API_URL } from \"../config\";\nconst getOrderByClaimCode = async claimCode => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  const response = await fetch(`${API_URL}/api/staff/order/${claimCode}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to fetch order\");\n  }\n  return await response.json();\n};\nconst fulfillOrder = async claimCode => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  const response = await fetch(`${API_URL}/api/staff/fulfill`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      claimCode\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to fulfill order\");\n  }\n  return await response.json();\n};\nexport const staffService = {\n  getOrderByClaimCode,\n  fulfillOrder\n};","map":{"version":3,"names":["API_URL","getOrderByClaimCode","claimCode","token","localStorage","getItem","Error","response","fetch","headers","Authorization","ok","error","json","message","fulfillOrder","method","body","JSON","stringify","staffService"],"sources":["C:/Users/nikku/Desktop/GROUP_COURSEWORK/frontend/src/services/staffService.js"],"sourcesContent":["import { API_URL } from \"../config\"\n\nconst getOrderByClaimCode = async (claimCode) => {\n  const token = localStorage.getItem(\"token\")\n  if (!token) {\n    throw new Error(\"Authentication required\")\n  }\n\n  const response = await fetch(`${API_URL}/api/staff/order/${claimCode}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  })\n\n  if (!response.ok) {\n    const error = await response.json()\n    throw new Error(error.message || \"Failed to fetch order\")\n  }\n\n  return await response.json()\n}\n\nconst fulfillOrder = async (claimCode) => {\n  const token = localStorage.getItem(\"token\")\n  if (!token) {\n    throw new Error(\"Authentication required\")\n  }\n\n  const response = await fetch(`${API_URL}/api/staff/fulfill`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({ claimCode }),\n  })\n\n  if (!response.ok) {\n    const error = await response.json()\n    throw new Error(error.message || \"Failed to fulfill order\")\n  }\n\n  return await response.json()\n}\n\nexport const staffService = {\n  getOrderByClaimCode,\n  fulfillOrder,\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,WAAW;AAEnC,MAAMC,mBAAmB,GAAG,MAAOC,SAAS,IAAK;EAC/C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE;IACV,MAAM,IAAIG,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,oBAAoBE,SAAS,EAAE,EAAE;IACtEO,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUP,KAAK;IAChC;EACF,CAAC,CAAC;EAEF,IAAI,CAACI,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIP,KAAK,CAACM,KAAK,CAACE,OAAO,IAAI,uBAAuB,CAAC;EAC3D;EAEA,OAAO,MAAMP,QAAQ,CAACM,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,MAAME,YAAY,GAAG,MAAOb,SAAS,IAAK;EACxC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE;IACV,MAAM,IAAIG,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,oBAAoB,EAAE;IAC3DgB,MAAM,EAAE,MAAM;IACdP,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAE,UAAUP,KAAK;IAChC,CAAC;IACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEjB;IAAU,CAAC;EACpC,CAAC,CAAC;EAEF,IAAI,CAACK,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIP,KAAK,CAACM,KAAK,CAACE,OAAO,IAAI,yBAAyB,CAAC;EAC7D;EAEA,OAAO,MAAMP,QAAQ,CAACM,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMO,YAAY,GAAG;EAC1BnB,mBAAmB;EACnBc;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}