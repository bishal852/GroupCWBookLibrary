{"ast":null,"code":"import { API_URL } from \"../config\";\nconst getBookReviews = async bookId => {\n  const response = await fetch(`${API_URL}/api/reviews/book/${bookId}`);\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to fetch reviews\");\n  }\n  return await response.json();\n};\nconst getReview = async reviewId => {\n  const response = await fetch(`${API_URL}/api/reviews/${reviewId}`);\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to fetch review\");\n  }\n  return await response.json();\n};\nconst createReview = async reviewData => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  const response = await fetch(`${API_URL}/api/reviews`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(reviewData)\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to create review\");\n  }\n  return await response.json();\n};\nconst updateReview = async (reviewId, reviewData) => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  const response = await fetch(`${API_URL}/api/reviews/${reviewId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(reviewData)\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to update review\");\n  }\n  return await response.json();\n};\nconst deleteReview = async reviewId => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  const response = await fetch(`${API_URL}/api/reviews/${reviewId}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to delete review\");\n  }\n  return await response.json();\n};\nconst canReviewBook = async bookId => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    return {\n      canReview: false,\n      hasPurchased: false,\n      hasReviewed: false\n    };\n  }\n  try {\n    const response = await fetch(`${API_URL}/api/reviews/can-review/${bookId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      return {\n        canReview: false,\n        hasPurchased: false,\n        hasReviewed: false\n      };\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error checking if user can review book:\", error);\n    return {\n      canReview: false,\n      hasPurchased: false,\n      hasReviewed: false\n    };\n  }\n};\nexport const reviewService = {\n  getBookReviews,\n  getReview,\n  createReview,\n  updateReview,\n  deleteReview,\n  canReviewBook\n};","map":{"version":3,"names":["API_URL","getBookReviews","bookId","response","fetch","ok","error","json","Error","message","getReview","reviewId","createReview","reviewData","token","localStorage","getItem","method","headers","Authorization","body","JSON","stringify","updateReview","deleteReview","canReviewBook","canReview","hasPurchased","hasReviewed","console","reviewService"],"sources":["C:/Users/sharb/OneDrive/Desktop/GROUP_COURSEWORK/GROUP_COURSEWORK/frontend/src/services/reviewService.js"],"sourcesContent":["import { API_URL } from \"../config\"\n\nconst getBookReviews = async (bookId) => {\n  const response = await fetch(`${API_URL}/api/reviews/book/${bookId}`)\n\n  if (!response.ok) {\n    const error = await response.json()\n    throw new Error(error.message || \"Failed to fetch reviews\")\n  }\n\n  return await response.json()\n}\n\nconst getReview = async (reviewId) => {\n  const response = await fetch(`${API_URL}/api/reviews/${reviewId}`)\n\n  if (!response.ok) {\n    const error = await response.json()\n    throw new Error(error.message || \"Failed to fetch review\")\n  }\n\n  return await response.json()\n}\n\nconst createReview = async (reviewData) => {\n  const token = localStorage.getItem(\"token\")\n  if (!token) {\n    throw new Error(\"Authentication required\")\n  }\n\n  const response = await fetch(`${API_URL}/api/reviews`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(reviewData),\n  })\n\n  if (!response.ok) {\n    const error = await response.json()\n    throw new Error(error.message || \"Failed to create review\")\n  }\n\n  return await response.json()\n}\n\nconst updateReview = async (reviewId, reviewData) => {\n  const token = localStorage.getItem(\"token\")\n  if (!token) {\n    throw new Error(\"Authentication required\")\n  }\n\n  const response = await fetch(`${API_URL}/api/reviews/${reviewId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(reviewData),\n  })\n\n  if (!response.ok) {\n    const error = await response.json()\n    throw new Error(error.message || \"Failed to update review\")\n  }\n\n  return await response.json()\n}\n\nconst deleteReview = async (reviewId) => {\n  const token = localStorage.getItem(\"token\")\n  if (!token) {\n    throw new Error(\"Authentication required\")\n  }\n\n  const response = await fetch(`${API_URL}/api/reviews/${reviewId}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  })\n\n  if (!response.ok) {\n    const error = await response.json()\n    throw new Error(error.message || \"Failed to delete review\")\n  }\n\n  return await response.json()\n}\n\nconst canReviewBook = async (bookId) => {\n  const token = localStorage.getItem(\"token\")\n  if (!token) {\n    return { canReview: false, hasPurchased: false, hasReviewed: false }\n  }\n\n  try {\n    const response = await fetch(`${API_URL}/api/reviews/can-review/${bookId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n\n    if (!response.ok) {\n      return { canReview: false, hasPurchased: false, hasReviewed: false }\n    }\n\n    return await response.json()\n  } catch (error) {\n    console.error(\"Error checking if user can review book:\", error)\n    return { canReview: false, hasPurchased: false, hasReviewed: false }\n  }\n}\n\nexport const reviewService = {\n  getBookReviews,\n  getReview,\n  createReview,\n  updateReview,\n  deleteReview,\n  canReviewBook,\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}