{"ast":null,"code":"import * as signalR from \"@microsoft/signalr\";\nclass SignalRService {\n  constructor() {\n    this.connection = null;\n    this.baseUrl = \"http://localhost:5000\"; // Update with your API URL\n  }\n\n  // Initialize the connection\n  async start() {\n    try {\n      this.connection = new signalR.HubConnectionBuilder().withUrl(`${this.baseUrl}/hubs/orders`).withAutomaticReconnect().build();\n\n      // Set up event handlers before starting the connection\n      this.connection.on(\"ReceiveOrderNotification\", message => {\n        if (window.addToast) {\n          window.addToast(message);\n        }\n      });\n      await this.connection.start();\n      console.log(\"SignalR Connected\");\n      return true;\n    } catch (err) {\n      console.error(\"SignalR Connection Error: \", err);\n      return false;\n    }\n  }\n\n  // Stop the connection\n  async stop() {\n    if (this.connection) {\n      await this.connection.stop();\n      console.log(\"SignalR Disconnected\");\n    }\n  }\n}\n\n// Create a singleton instance\nconst signalRService = new SignalRService();\nexport default signalRService;","map":{"version":3,"names":["signalR","SignalRService","constructor","connection","baseUrl","start","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","on","message","window","addToast","console","log","err","error","stop","signalRService"],"sources":["C:/Users/sharb/OneDrive/Desktop/GROUP_COURSEWORK/GROUP_COURSEWORK/frontend/src/services/signalRService.js"],"sourcesContent":["import * as signalR from \"@microsoft/signalr\"\n\nclass SignalRService {\n  constructor() {\n    this.connection = null\n    this.baseUrl = \"http://localhost:5000\" // Update with your API URL\n  }\n\n  // Initialize the connection\n  async start() {\n    try {\n      this.connection = new signalR.HubConnectionBuilder()\n        .withUrl(`${this.baseUrl}/hubs/orders`)\n        .withAutomaticReconnect()\n        .build()\n\n      // Set up event handlers before starting the connection\n      this.connection.on(\"ReceiveOrderNotification\", (message) => {\n        if (window.addToast) {\n          window.addToast(message)\n        }\n      })\n\n      await this.connection.start()\n      console.log(\"SignalR Connected\")\n      return true\n    } catch (err) {\n      console.error(\"SignalR Connection Error: \", err)\n      return false\n    }\n  }\n\n  // Stop the connection\n  async stop() {\n    if (this.connection) {\n      await this.connection.stop()\n      console.log(\"SignalR Disconnected\")\n    }\n  }\n}\n\n// Create a singleton instance\nconst signalRService = new SignalRService()\nexport default signalRService\n"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,oBAAoB;AAE7C,MAAMC,cAAc,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,OAAO,GAAG,uBAAuB,EAAC;EACzC;;EAEA;EACA,MAAMC,KAAKA,CAAA,EAAG;IACZ,IAAI;MACF,IAAI,CAACF,UAAU,GAAG,IAAIH,OAAO,CAACM,oBAAoB,CAAC,CAAC,CACjDC,OAAO,CAAC,GAAG,IAAI,CAACH,OAAO,cAAc,CAAC,CACtCI,sBAAsB,CAAC,CAAC,CACxBC,KAAK,CAAC,CAAC;;MAEV;MACA,IAAI,CAACN,UAAU,CAACO,EAAE,CAAC,0BAA0B,EAAGC,OAAO,IAAK;QAC1D,IAAIC,MAAM,CAACC,QAAQ,EAAE;UACnBD,MAAM,CAACC,QAAQ,CAACF,OAAO,CAAC;QAC1B;MACF,CAAC,CAAC;MAEF,MAAM,IAAI,CAACR,UAAU,CAACE,KAAK,CAAC,CAAC;MAC7BS,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChC,OAAO,IAAI;IACb,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZF,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAED,GAAG,CAAC;MAChD,OAAO,KAAK;IACd;EACF;;EAEA;EACA,MAAME,IAAIA,CAAA,EAAG;IACX,IAAI,IAAI,CAACf,UAAU,EAAE;MACnB,MAAM,IAAI,CAACA,UAAU,CAACe,IAAI,CAAC,CAAC;MAC5BJ,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACrC;EACF;AACF;;AAEA;AACA,MAAMI,cAAc,GAAG,IAAIlB,cAAc,CAAC,CAAC;AAC3C,eAAekB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}